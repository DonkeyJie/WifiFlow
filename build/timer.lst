C51 COMPILER V9.52.0.0   TIMER                                                             07/25/2014 15:24:15 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\build\timer.obj
COMPILER INVOKED BY: e:\Keil_v5\C51\BIN\C51.EXE lib\timer.c BROWSE INCDIR(.\lib;.\src) DEBUG OBJECTEXTEND PRINT(.\build\
                    -timer.lst) TABS(2) OBJECT(.\build\timer.obj)

line level    source

   1          
   2          /*************  功能说明  **************
   3          
   4          本文件为STC15xxx系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
   5          
   6          
   7          ******************************************/
   8          
   9          
  10          
  11          #include  "timer.h"
  12          
  13          /********************* Timer0中断函数*******写在Soft_UART中,作为软串口********/
  14          #if 0
              void timer0_int (void) interrupt TIMER0_VECTOR
              {
              
              }
              #endif
  20          
  21          /********************* Timer1中断函数*******写在main中***********/
  22          #if 0
              void timer1_int (void) interrupt TIMER1_VECTOR
              {
              
              }
              #endif
  28          
  29          /********************* Timer2中断函数************************/
  30          #ifdef USE_TIMER2
              void timer2_int (void) interrupt TIMER2_VECTOR
              {
                P10 = ~P10;
              }
              #endif
  36          
  37          //========================================================================
  38          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  39          // 描述: 定时器初始化程序.
  40          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  41          // 返回: 成功返回0, 空操作返回1,错误返回2.
  42          // 版本: V1.0, 2012-10-22
  43          //========================================================================
  44          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  45          {
  46   1        if(TIM > Timer2)  return 1; //空操作
  47   1      
  48   1          #ifdef USE_TIMER0
  49   1        if(TIM == Timer0)
  50   1        {
  51   2          TR0 = 0;    //停止计数
  52   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
  53   2          else                  ET0 = 0;  //禁止中断
  54   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
C51 COMPILER V9.52.0.0   TIMER                                                             07/25/2014 15:24:15 PAGE 2   

  55   2          else                  PT0 = 0;  //低优先级中断
  56   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
  57   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  58   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
  59   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
  60   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
  61   2          else                    TMOD &= ~0x04;  //定时
  62   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
  63   2          else              INT_CLKO &= ~0x01;  //不输出时钟
  64   2          
  65   2              if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)
  66   2              {
  67   3                  TL0 = (u8)(65535-MAIN_Fosc/TIMx->TIM_Value);
  68   3                  TH0 = (u8)((65535-MAIN_Fosc/TIMx->TIM_Value) >> 8);
  69   3              }
  70   2      
  71   2              if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)
  72   2              {
  73   3                  TL0 = (u8)(65535-MAIN_Fosc/12/TIMx->TIM_Value);
  74   3                  TH0 = (u8)((65535-MAIN_Fosc/12/TIMx->TIM_Value) >> 8);
  75   3              }
  76   2      
  77   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
  78   2          return  0;    //成功
  79   2        }
  80   1          #endif
  81   1      
  82   1          #ifdef USE_TIMER1
                if(TIM == Timer1)
                {
                  TR1 = 0;    //停止计数
                  if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
                  else                  ET1 = 0;  //禁止中断
                  if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
                  else                  PT1 = 0;  //低优先级中断
                  if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
                  TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
                  else                    TMOD &= ~0x40;  //定时
                  if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
                  else              INT_CLKO &= ~0x02;  //不输出时钟
                  
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)
                      {
                          TL1 = (u8)(65535-MAIN_Fosc/TIMx->TIM_Value);
                          TH1 = (u8)((65535-MAIN_Fosc/TIMx->TIM_Value) >> 8);
                      }
              
                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)
                      {
                          TL1 = (u8)(65535-FOSC/12/TIMx->TIM_Value);
                          TH1 = (u8)((65535-FOSC/12/TIMx->TIM_Value) >> 8);
                      }
                  if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
                  return  0;    //成功
                }
                  #endif
 114   1      
 115   1          #ifdef USE_TIMER2
C51 COMPILER V9.52.0.0   TIMER                                                             07/25/2014 15:24:15 PAGE 3   

                if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
                {
                  AUXR &= ~(1<<4);  //停止计数
                  if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
                  else                    IE2  &= ~(1<<2);  //禁止中断
                  if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
                  else                    AUXR &= ~(1<<3);  //定时
                  if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
                  else              INT_CLKO &= ~0x04;  //不输出时钟
              
                  if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)
                      {
                          TL2 = (u8)(65535-FOSC/TIMx->TIM_Value);
                          TH2 = (u8)((65535-FOSC/TIMx->TIM_Value) >> 8);
                      }
              
                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)
                      {
                          TL2 = (u8)(65535-FOSC/12/TIMx->TIM_Value);
                          TH2 = (u8)((65535-FOSC/12/TIMx->TIM_Value) >> 8);
                      }
                  if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
                  return  0;    //成功
                }
                  #endif
 144   1        return 2; //错误
 145   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    341    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
